<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
		 http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         metadata-complete="true"
         version="3.1">

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!-- Like any servlet, DispatcherServlet must be configured in your web application’s web.xml file -->
    <!-- The <servlet-name> given to the servlet is significant. By default, when DispatcherServlet is loaded, it will
        load the Spring application context from an XML file whose name is based on the name of the servlet.
        In this case, because the servlet is named training, DispatcherServlet will try to load the application context
        from a file named training-servlet.xml.-->
    <servlet>
        <servlet-name>training</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- You must indicate what URLs will be handled by the DispatcherServlet -->
    <servlet-mapping>
        <servlet-name>training</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- Depending on how you’ll be deploying your application, you have two context loaders to
        choose from: ContextLoaderListener and ContextLoaderServlet.
        Most likely, you’ll be deploying to a web container that supports the
        Servlet 2.3 specification (or higher) and initializes servlet listeners before servlets. If that’s the case,
        you’ll want to configure ContextLoaderListener in your web.xml file as follows -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- If not specified otherwise, the context loader will look for a Spring configuration file at
        /WEB-INF/applicationContext.xml. But this location doesn’t lend itself to breaking up the application
        context across application layers, so you’ll need to override this default.
        You can specify one or more Spring configuration files for the context loader
        to load by setting the contextConfigLocation parameter in the servlet context-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/training-servlet.xml /WEB-INF/web-application-config.xml</param-value>
    </context-param>

</web-app>